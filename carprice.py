# -*- coding: utf-8 -*-
"""CarPrice.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IMd_3fePt7DfEr-5F0zNWBC_CN1GaQRd
"""

from google.colab import drive
drive.mount("/content/drive")

cd /content/drive/MyDrive/Linear_Regression

import warnings
warnings.filterwarnings("ignore")

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.feature_selection import RFE
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, r2_score, mean_squared_error

Data_frame = pd.read_csv("Car_Price.csv")
Data_frame.head()

Data_frame_columns = Data_frame.columns.values
print("Number of columns: ", len(Data_frame_columns))
print("Dataset's columns")
print(Data_frame_columns)

print("number of samples: ", Data_frame.shape[0], "\nNumber of features: ", Data_frame.shape[1])

print(Data_frame.describe())

Data_frame.info()

print(Data_frame["CarName"].value_counts())

Company_Name = Data_frame["CarName"].apply(lambda x : x.split(" ")[0])

#Company_Name = Data_frame["CarName"].values
#CompName = []
#for name in Company_Name:
  #namesp = name.split(" ")
  #CompName.append(namesp[0])

  
print(Company_Name)

Data_frame.insert(3, "Company_Name", Company_Name)
Data_frame_columns = Data_frame.columns.values
print("Number of columns:", len(Data_frame_columns))
print("Dataset's columns")
print(Data_frame_columns)

Data_frame.drop("CarName", axis = 1, inplace = True)

print("Total Number of company in dataset:", len(Data_frame["Company_Name"].unique()))
print(Data_frame["Company_Name"].unique())

Data_frame["Company_Name"] = Data_frame["Company_Name"].str.lower()
print("Total Number of company in dataset:", len(Data_frame["Company_Name"].unique()))
print(Data_frame["Company_Name"].unique())

Data_frame["Company_Name"] = Data_frame["Company_Name"].replace("maxda", "mazda")
Data_frame["Company_Name"] = Data_frame["Company_Name"].replace("porcshce", "porsche")
Data_frame["Company_Name"] = Data_frame["Company_Name"].replace("toyouta", "toyota")
Data_frame["Company_Name"] = Data_frame["Company_Name"].replace("vokswagen", "volkswagen")
Data_frame["Company_Name"] = Data_frame["Company_Name"].replace("vw", "volkswagen")

print("Total Number of company in dataset:", len(Data_frame["Company_Name"].unique()))
print(Data_frame["Company_Name"].unique())

print("Max price:", Data_frame["price"].max())
print("Min price:", Data_frame["price"].min())

plt.figure(figsize = (15,5))
plt.title("Car Price Distrbution Histogram")
sns.distplot(Data_frame["price"])

company_names = Data_frame["Company_Name"].unique()
print(company_names)
print()
print(Data_frame['Company_Name'].value_counts())
print()
print(Data_frame["Company_Name"].value_counts().values)
print()
print(Data_frame["Company_Name"].value_counts().index.tolist())

names = Data_frame["Company_Name"].value_counts().index.tolist()
frequency = Data_frame["Company_Name"].value_counts().values

plt.figure(figsize = (15,5))
plt.title("Company name Histogram")
plt.bar(names, frequency, color = "green")
plt.xticks(rotation = "vertical")
plt.show()

plt.figure(figsize = (15,5))
plt.title("Company name Histogram")
sns.barplot(names, frequency, palette = "autumn")
plt.xticks(rotation = "vertical")
plt.show()

Data_frame_columns = Data_frame.columns.values
print(Data_frame_columns)

names = Data_frame["fueltype"].value_counts().index.tolist()
frequency = Data_frame["fueltype"].value_counts().values
plt.figure(figsize = (10,10))
plt.subplot(2,2,1)
plt.title("Fueltype Histogram")
sns.barplot(names, frequency, palette ="autumn")
plt.xlabel("Type of Fuel Engine")
plt.ylabel("Number of cars")
plt.xticks(rotation = "vertical")

names = Data_frame["carbody"].value_counts().index.tolist()
frequency = Data_frame["carbody"].value_counts().values
plt.subplot(2,2,2)
plt.title("Carbody Histogram")
sns.barplot(names, frequency, palette ="spring")
plt.xlabel("Type of Car Body")
plt.ylabel("Number of cars")
plt.xticks(rotation = "vertical")

plt.tight_layout(pad = 3.0)

names = Data_frame["drivewheel"].value_counts().index.tolist()
frequency = Data_frame["drivewheel"].value_counts().values
plt.subplot(2,2,3)
plt.title("Drivewheel Histogram")
sns.barplot(names, frequency, palette ="mako")
plt.xlabel("Type of Drive Wheel")
plt.ylabel("Number of cars")
plt.xticks(rotation = "vertical")

names = Data_frame["enginetype"].value_counts().index.tolist()
frequency = Data_frame["enginetype"].value_counts().values
plt.subplot(2,2,4)
plt.title("Engine Type Histogram")
sns.barplot(names, frequency, palette ="twilight")
plt.xlabel("Type of Engine")
plt.ylabel("Number of cars")
plt.xticks(rotation = "vertical")

plt.show()

plt.figure(figsize = (5,5))
plt.title("Engine Type vs Price")
sns.boxplot(Data_frame["enginetype"], Data_frame["price"])
plt.show()

Data_frame = Data_frame.drop("car_ID", axis = 1)
Data_frame = Data_frame.drop('enginelocation', axis = 1)

Data_frame_columns = Data_frame.columns.values
print(Data_frame_columns)

New_data_frame = Data_frame.copy()
string_column_list = []
for column_name in Data_frame.columns:
  if Data_frame[column_name].dtypes == "object":
    print("###########################")
    print("Column Name:", column_name)
    print(New_data_frame[column_name].value_counts())
    string_column_list.append(column_name)

New_data_frame["Company_Name"] = New_data_frame["Company_Name"].map({'alfa-romero': 0, 'audi':1, 'bmw':2, 'chevrolet':3, 'dodge':4, 'honda':5, 'isuzu':6, 'jaguar':7,
      'mazda': 7, 'buick': 8,'mercury': 9, 'mitsubishi': 10, 'nissan':11, 'peugeot': 12, 'plymouth': 13, 'porsche': 14,'renault': 15, 'saab': 16, 'subaru': 17,'toyota': 18, 'volkswagen': 19, 'volvo': 20, "jaguar" : 21})
New_data_frame['fueltype'] = New_data_frame['fueltype'].map( {'gas': 0, 'diesel': 1} )
New_data_frame['aspiration'] = New_data_frame['aspiration'].map( {'std': 0, 'turbo': 1} )
New_data_frame['doornumber'] = New_data_frame['doornumber'].map( {'two': 0, 'four': 1} )
New_data_frame['drivewheel'] = New_data_frame['drivewheel'].map( {'rwd': 0, 'fwd': 1, '4wd': 2} )
New_data_frame['enginetype'] = New_data_frame['enginetype'].map( {'dohc': 0, 'ohcv': 1, 'ohc': 2,
                                                                  'l': 3, 'rotor': 4, 'ohcf': 5, "dohcv": 6} )
New_data_frame['cylindernumber'] = New_data_frame['cylindernumber'].map( {'four': 0, 'six': 1, 'five': 2,
                                                                  'three': 3, 'twelve': 4, 'two': 5, "eight": 6} )
New_data_frame['fuelsystem'] = New_data_frame['fuelsystem'].map( {'mpfi': 0, '2bbl': 1, 'mfi': 2,
                                                                  '1bbl': 3, 'spfi': 4, '4bbl': 5,
                                                                  'idi': 6, 'spdi': 7} )
New_data_frame['carbody'] = New_data_frame['carbody'].map( {'convertible': 0, 'hatchback': 1, 'sedan': 2,'wagon': 3, 'hardtop': 4} )

print(New_data_frame.dtypes)

X_train_data = New_data_frame.drop('price', axis = 1)
Y_train_data = New_data_frame["price"]
X_train, X_val, Y_train, Y_val = train_test_split(X_train_data, Y_train_data, test_size = 0.2)
print(X_train.shape)
print(X_val.shape)
print(Y_train.shape)
print(Y_val.shape)

linear_reg = LinearRegression()
linear_reg.fit(X_train, Y_train)
print('R2Score for Training', linear_reg.score(X_train, Y_train))

Y_pred = linear_reg.predict(X_val)
print("R2Score for Testing", r2_score(Y_val, Y_pred))
print('MAE:', mean_absolute_error(Y_val, Y_pred))
print("MSE:", mean_squared_error(Y_val, Y_pred))

def scatter(x, fig):
  plt.subplot(6,4,fig)
  plt.scatter(New_data_frame[x], New_data_frame['price'])
  plt.title(x + ' vs price')
  plt.ylabel("Price")
  plt.xlabel(x)

plt.figure(figsize=(15,15))

New_Data_frame_columns = New_data_frame.columns.values
print("Number of columns:", len(New_Data_frame_columns))
print()
print("Dataset's columns")
print(New_Data_frame_columns)

i = 0
for column_name in New_Data_frame_columns:
  if Data_frame[column_name].dtypes != "object":
    i += 1
    scatter(column_name, i)
    plt.tight_layout()



corr_matrix = New_data_frame.corr()
plt.figure(figsize = (20,10))
sns.heatmap(corr_matrix, annot = True)

New_data_frame = New_data_frame.drop("symboling", axis = 1)
New_data_frame = New_data_frame.drop("carheight", axis = 1)
New_data_frame = New_data_frame.drop("stroke", axis = 1)
New_data_frame = New_data_frame.drop("peakrpm", axis = 1)
New_data_frame = New_data_frame.drop("compressionratio", axis = 1)

X_train_data = New_data_frame.drop("price", axis = 1)
Y_train_data = New_data_frame["price"]
X_train, X_val, Y_train, Y_val = train_test_split(X_train_data, Y_train_data, test_size = 0.2)
print(X_train.shape)
print(Y_train.shape)
print(X_val.shape)
print(Y_val.shape)



linear_reg = LinearRegression()
linear_reg.fit(X_train, Y_train)
print("R2Score for Training", linear_reg.score(X_train, Y_train))

y_pred = linear_reg.predict(X_val)

print("R2Score for testing", r2_score(Y_val, y_pred))
print("MAE:", mean_absolute_error(Y_val, y_pred))
print("MSE:", mean_squared_error(Y_val, y_pred))

fig = plt.figure()
plt.scatter(Y_val, y_pred)
plt.title("Y_val vs Y_pred")
plt.xlabel("Y_val")
plt.ylabel("y_pred")

plt.plot(Y_val, y_pred, "o")
m, b = np.polyfit(Y_val, y_pred, 1)
plt.plot(Y_val, m*Y_val + b)